/*CPU*/
//instuctions
// I15 I14 I13 I12 I11 I10 I9 I8 I7 I6 I5 I4 I3 I2 I1 I0
//             a    c1 c2  c3 c4 c5 c6 d1 d2 d3 j1 j2 j3
CHIP CPU {

    IN  inM[16], instruction[16], reset;           

    OUT outM[16], writeM, addressM[15], pc[15];          

    PARTS:
	Not(in=instruction[15], out=ni);
	Mux16(a=ALUOut, b=instruction, sel=ni, out=i); //output into Register A

	Or(a=ni, b=instruction[5], out=instrucA); //into A register if A instruction or C instruction and destined to A are given as input either I15 is 0 or I15 is 1 and d1 is 1 
	ARegister(in=i, load=instrucA, out=A, out[0..14]=addressM); //storing address of data in register A

	And(a=instruction[15], b=instruction[12], out=output1); //select A or M to store data based on a bit
        //A if a = 0, M if a = 1
	Mux16(a=A, b=inM, sel=output1, out=output2); //output into ALU
	
	ALU(x=D, y=output2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUOut, out=outM, zr=zr, ng=ng);  //output after arithmetic calculations between inputs

	And(a=instruction[15], b=instruction[4], out=instrucD); //into D register if d2 bit is 1
	DRegister(in=ALUOut, load=instrucD, out=D);   //storing data value in D register

	And(a=instruction[15], b=instruction[3], out=writeM); //destined into M memory location if d3 bit is 1
	Not(in=ng, out=pos);
	Not(in=zr, out=nzr);
	And(a=instruction[15], b=instruction[0], out=jgt); //jump if greater than condition is satisfied j1j2j3 is 001
	And(a=pos, b=nzr, out=posnzr);
	And(a=jgt, b=posnzr, out=out1);
	And(a=instruction[15], b=instruction[1], out=jeq);  //jump if equal to condition is satisfied j1j2j3 is 010
	And(a=jeq, b=zr, out=out2);
	And(a=instruction[15], b=instruction[2], out=jlt); //jump if less than condition is satisfied j1j2j3 is 100
	And(a=jlt, b=ng, out=out3);
	Or(a=out1, b=out2, out=outt);
	Or(a=out3, b=outt, out=out); //jump to A except for j1j2j3 000
        PC(in=A, load=out, inc=true, reset=reset, out[0..14]=pc); //program counter for storing address of instruction to be excuted

}






