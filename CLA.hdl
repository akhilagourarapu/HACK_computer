/* Supporting Chip: CLA gate

X, Y = signed or unsigned 16-bit integers
c0=carry into LSB
s = 16-bit sum bits
c4 = last carry bit
*/
CHIP CLA{
    IN x[4], y[4], c0;
    OUT s[4], c4;

    PARTS:
	// pi = Xor(xi, yi), gi = xi.yi
	Xor(a=x[0], b=y[0], out=p0);
	Xor(a=x[1], b=y[1], out=p1);
	Xor(a=x[2], b=y[2], out=p2);
	Xor(a=x[3], b=y[3], out=p3);

	And(a=x[0], b=y[0], out=g0);
	And(a=x[1], b=y[1], out=g1);
	And(a=x[2], b=y[2], out=g2);
	And(a=x[3], b=y[3], out=g3);

	// Generating c1
	And(a=p0, b=c0, out=p0c0);
	Or(a=p0c0, b=g0, out=c1);

	// Generating c2
	And3(a=p1, b=p0, c=c0, out=t1);
	And(a=p1, b=g0, out=t2);
	Or(a=t1, b=t2, out=t3);
	Or(a=t3, b=g1, out=c2);

	// Generating c3
	And4(a=p2, b=p1, c=p0, d=c0, out=f1);
	And3(a=p2, b=p1, c=g0, out=f2);
	And(a=p2, b=g1, out=f3);
	Or(a=f1, b=f2, out=f4);
	Or(a=f3, b=f4, out=f5);
	Or(a=f5, b=g2, out=c3);
	
	// Generating c4
	And5(a=p3, b=p2, c=p1, d=p0, e=c0, out=v1);
	And4(a=p3, b=p2, c=p1, d=g0, out=v2);
	And3(a=p3, b=p2, c=g1, out=v3);
	And(a=p3, b=g2, out=v4);
	Or(a=v1, b=v2, out=v5);
	Or(a=v5, b=v3, out=v6);
	Or(a=v6, b=v4, out=v7);
	Or(a=v7, b=g3, out=c4);

	// Generating sum-bits
	Xor(a=p0,b=c0, out=s[0]);
	Xor(a=p1,b=c1, out=s[1]);
	Xor(a=p2,b=c2, out=s[2]);
	Xor(a=p3,b=c3, out=s[3]);	
}
